title: Intermediate NodeJS
tagline: Create a REST api with Node.js, Express.js, and MongoDB
description: This tutorial expands on concepts in the intro to Node.js and Express.js course. You will learn how to use a database (MongoDB) to Create, Read, Update, and Delete data.
tags:
  - node.js
  - express.js
  - mongoose.js
  - JavaScript
  - MongoDB

template:
  name: intermediate-node-course
  repo: intermediate-node-course-template
  description: an intermediate node.js course
before:
  - type: createIssue
    title: Set up node project
    body: 01-intro.md

steps:
  - title: Intro
    description: Overview of project
    event: issue_comment
    link: "{{ repoUrl }}/issues/1"
    actions: 
      - type: respond
        with: 01-setup.md
        issue: 1

  - title: Set-up
    description: Install and setup your developer environment
    event: issues.closed
    link: "{{ repoUrl }}/issues/1"
    actions: 
      - type: respond
        with: 01-complete.md
        issue: 1
      - type: createIssue
        title: Create User model 
        body: 02-model.md

  - title: Create user model
    description: Create a user model for MongoDB using mongoose.js
    event: issue_comment
    link: "{{ repoUrl }}/issues/2"
    actions: 
      - type: gate
        left: '%payload.comment.body%'
        operator: ==
        right: email
        else: 
          - type: respond
            with: incorrect.md
            issue: 2
            data: 
              correctAnswer: 'email'
      - type: respond
        with: 02-routes.md
        issue: 2

  - title: Using mongoose with express
    description: Learn how a mongoose model is used with express routes
    event: issue_comment
    link: "{{ repoUrl }}/issues/2"
    actions:
      - type: gate
        left: '%payload.comment.body%'
        operator: ==
        right: c
        else: 
          - type: respond
            with: incorrect.md
            issue: 2
            data: 
              correctAnswer: 'c'
      - type: respond
        with: 02-shell.md
        issue: 2

  - title: Using the mongo shell
    description: Visualize and manipulate data on the commande line 
    event: push
    link: "{{ repoUrl }}/issues/2"
    actions:
      - type: respond
        with: 02-complete.md
        issue: 2
      - type: createIssue
        title: Create, Read, Update, and Delete
        body: 03-create.md
      - type: closeIssue
        issue: 2

  - title: Create Users
    description: Use the User.create method to post new users
    event: issue_comment
    link: "{{ repoUrl }}/issues/3"
    actions:
      - type: respond
        with: 03-read.md
        issue: 3
        action_id: new_user
        data:
          userID: '%payload.comment.body%'

  - title: Read Users
    description: Get data from a user using an id 
    event: push
    link: "{{ repoUrl }}/issues/3"
    actions:
      - type: respond
        with: 03-update.md
        issue: 3
        data: 
          userID: '%actions.new_user.data.userID%'

  - title: Update users
    description: Update data with a put request 
    event: push
    link: "{{ repoUrl }}/issues/3"
    actions:
      - type: respond
        with: 03-delete.md
        issue: 3
        data: 
          userID: '%actions.new_user.data.userID%'

  - title: Delete users
    description: Delete users with a delete request
    event: push
    link: "{{ repoUrl }}/issues/3"
    actions:
      - type: createIssue
        title: Refactor
      - type: respond
        with: 03-complete.md
        issue: 3
      - type: closeIssue
        issue: 3

  - title: Refactor, Reduce, Reuse
    description: Make your routes easy to maintain by refactoring repetitive code
    event: push
    link: "{{ repoUrl }}/issues/4"
    actions:
      - type: respond
        with: 04-complete.md
        issue: 4
      - type: closeIssue
        issue: 4